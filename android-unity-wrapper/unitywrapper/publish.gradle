apply plugin: 'maven-publish'
apply plugin: 'signing'

def isReleaseBuild() {
    return !VERSION_NAME.contains("-SNAPSHOT")
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

android {
    publishing {
        singleVariant("release") {
            // if you don't want sources/javadoc, remove these lines
            withJavadocJar()
        }
    }
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                // The coordinates of the library
                groupId = GROUP
                artifactId = POM_ARTIFACT_ID
                version = VERSION_NAME

                // Artifacts to publish
                artifact("$buildDir/outputs/aar/${project.name}-release.aar")

                // Configure POM metadata
                pom {
                    name.set(POM_NAME)
                    description.set(POM_DESCRIPTION)
                    url.set(POM_URL)

                    licenses {
                        license {
                            name.set(POM_LICENCE_NAME)
                            url.set(POM_LICENCE_URL)
                            distribution.set(POM_LICENCE_DIST)
                        }
                    }

                    developers {
                        developer {
                            id.set(POM_DEVELOPER_ID)
                            name.set(POM_DEVELOPER_NAME)
                        }
                    }

                    scm {
                        connection.set(POM_SCM_CONNECTION)
                        developerConnection.set(POM_SCM_DEV_CONNECTION)
                        url.set(POM_SCM_URL)
                    }
                }

                // Add dependencies to the POM
                pom.withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    configurations.implementation.allDependencies.each { dependency ->
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', dependency.group ?: '')
                        dependencyNode.appendNode('artifactId', dependency.name)
                        dependencyNode.appendNode('version', dependency.version ?: '')
                    }
                }
            }
        }

        repositories {
            maven {
                name = "sonatype"
                url = isReleaseBuild() ? getReleaseRepositoryUrl() : getSnapshotRepositoryUrl()

                credentials {
                    username = ossrhUsername
                    password = ossrhPassword
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("publish") }
        sign publishing.publications.release
    }
//    task androidJavadocs(type: Javadoc) {
//        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//        if (JavaVersion.current().isJava8Compatible()) {
//            allprojects {
//                tasks.withType(Javadoc) { options.addStringOption('Xdoclint:none', '-quiet') }
//            }
//        }
//    }
//    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
//        archiveClassifier = 'javadoc'
//        from androidJavadocs.destinationDir
//    }
//    task androidSourcesJar(type: Jar) {
//        classifier = 'sources'
//        from android.sourceSets.main.java.sourceFiles
//    }
//    artifacts { archives androidJavadocsJar }
}